import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional
from tensorflow.keras.utils import to_categorical

# Load the IMDB dataset
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

# Display dataset shape
print(f'Training data shape: {train_data.shape}')
print(f'Training labels shape: {train_labels.shape}')
print(f'Testing data shape: {test_data.shape}')
print(f'Testing labels shape: {test_labels.shape}')

# Pad sequences to a maximum length of 500
max_length = 500
train_data = pad_sequences(train_data, maxlen=max_length)
test_data = pad_sequences(test_data, maxlen=max_length)

# Convert labels to categorical (if necessary)
train_labels = np.array(train_labels)
test_labels = np.array(test_labels)

# Check padded data shape
print(f'Padded training data shape: {train_data.shape}')
print(f'Padded testing data shape: {test_data.shape}')

def create_model(is_bidirectional=False):
    model = Sequential()
    model.add(Embedding(input_dim=10000, output_dim=128, input_length=max_length))
    if is_bidirectional:
        model.add(Bidirectional(LSTM(64)))
    else:
        model.add(LSTM(64))
    model.add(Dense(1, activation='sigmoid'))  # Binary classification
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

# Create LSTM model
lstm_model = create_model()
lstm_model.summary()

# Train LSTM model
lstm_history = lstm_model.fit(train_data, train_labels, epochs=5, batch_size=64, validation_split=0.2)

# Evaluate LSTM model
lstm_loss, lstm_accuracy = lstm_model.evaluate(test_data, test_labels)
print(f'LSTM Test Accuracy: {lstm_accuracy:.2f}')

# Create BiLSTM model
bilstm_model = create_model(is_bidirectional=True)
bilstm_model.summary()

# Train BiLSTM model
bilstm_history = bilstm_model.fit(train_data, train_labels, epochs=5, batch_size=64, validation_split=0.2)

# Evaluate BiLSTM model
bilstm_loss, bilstm_accuracy = bilstm_model.evaluate(test_data, test_labels)
print(f'BiLSTM Test Accuracy: {bilstm_accuracy:.2f}')

# Plot training & validation accuracy
plt.plot(lstm_history.history['accuracy'], label='LSTM Training Accuracy')
plt.plot(lstm_history.history['val_accuracy'], label='LSTM Validation Accuracy')
plt.plot(bilstm_history.history['accuracy'], label='BiLSTM Training Accuracy')
plt.plot(bilstm_history.history['val_accuracy'], label='BiLSTM Validation Accuracy')
plt.title('Model Accuracy Comparison')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()