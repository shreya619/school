import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, Dense

# Load the IMDB dataset
(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

# Display dataset shape
print(f'Training data shape: {len(train_data)}')
print(f'Training labels shape: {len(train_labels)}')
print(f'Testing data shape: {len(test_data)}')
print(f'Testing labels shape: {len(test_labels)}')


# Pad sequences to a maximum length of 500
max_length = 500
train_data = pad_sequences(train_data, maxlen=max_length)
test_data = pad_sequences(test_data, maxlen=max_length)

# Check padded data shape
print(f'Padded training data shape: {train_data.shape}')
print(f'Padded testing data shape: {test_data.shape}')

def create_rnn_model():
    model = Sequential()
    model.add(Embedding(input_dim=10000, output_dim=128, input_length=max_length))
    model.add(SimpleRNN(64))  # Simple RNN layer
    model.add(Dense(1, activation='sigmoid'))  # Binary classification
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

# Create RNN model
rnn_model = create_rnn_model()
rnn_model.summary()

# Train RNN model
rnn_history = rnn_model.fit(train_data, train_labels, epochs=5, batch_size=64, validation_split=0.2)

# Evaluate RNN model
rnn_loss, rnn_accuracy = rnn_model.evaluate(test_data, test_labels)
print(f'RNN Test Accuracy: {rnn_accuracy:.2f}')

# Plot training & validation accuracy
plt.plot(rnn_history.history['accuracy'], label='RNN Training Accuracy')
plt.plot(rnn_history.history['val_accuracy'], label='RNN Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()